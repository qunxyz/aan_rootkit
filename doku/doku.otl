AAN - Rootkit programmieren Doku
Laden von Rootkits
	: Rootkits können mit externen Kernel Modulen geladen werden. Lädt ein
	: Benutzer dieses Modul in den Kernel wird das Rootkit aktiv.
Komplilieren von Kernel Modulen
	[Kernel Dokumentatione http://git.kernel.org/cgit/linux/kernel/git/torvalds/linux.git/tree/Documentation/kbuild/modules.txt]
	: Der Kernel wird anhand eines Werkzeugs mit dem Namen kbuild kompiliert.
	: So auch die externen Kernel Module. 
	Beispiel
	: The command to build an external module is:
	; $ make -C <path_to_kernel_src> M=$PWD
	: The kbuild system knows that an external module is being built due to the
	: "M=<dir>" option given in the command.
	; 
	:	To build against the running kernel use:
	;	$ make -C /lib/modules/`uname -r`/build M=$PWD
	Optionen
		- -C $KDIR
			: Der Ordner mit dem Source Code des Kernels, für den das Modul
			: kompiliert werden soll. Der make-Prozess wechselt in diesen Ordner,
			: führt das darin enthaltene Makefile aus und kehrt danach wieder in den
			: ursprünglichen Ordner zurück.
		- -M $PWD
			: Teilt kbuild mit, dass nun ein externes Kernel Modul kompiliert werden
			: soll. Der folgende Parameter gibt den Ordner an, in dem sich das Modul
			: befindet. In unserem Fall gehen wir davon aus, dass der sich Anwender im
			: gleichen Ordner wie das Modul befindet.
	Tagets
		: When building an external module, only a subset of the "make" targets
		: are available.
		; make -C $KDIR M=$PWD [target]
		- modules
			: Das gleiche wie gar kein Target (wie in unserem Fall). 
		- modules_install
			: Installiert das Module. Per default in den extra Ordner:
			; /lib/modules/<kernel_release>/extra/
		- clean
			: Alle generierten Dateien im Ordner des Moduls werden gelöscht.
		- help
			: Zeigt alle Möglichen Targets für externe Module an.


VFS Rootkit
/usr/lib/modules/3.14.5-1-ARCH/build/include/linux/fs.h
	< /*
	<  * This is the "filldir" function type, used by readdir() to let
	<  * the kernel specify what kind of dirent layout it wants to have.
	<  * This allows the kernel to read directories into kernel space or
	<  * to have different dirent layouts depending on the binary type.
	<  */
	< typedef int (*filldir_t)(void *, const char *, int, loff_t, u64, unsigned);
	< struct dir_context {
	< 	const filldir_t actor;
	< 	loff_t pos;
	< };

	< extern int vfs_readdir(struct file *, filldir_t, void *);
Funktionen readdir und iterate
	: Beide Funktionen ermöglichen den Zugang zur Adresse von 
	: filldir_t, wobei iterate, diese Adresse im Strukt dir_context speichert.
	: 
	: Ab Kernel 3.1.1 wird readdir mit iterate ersetzt. Die beiden Funktionen
	: sind im Strukt file_operations im Header fs.h zu finden.
	linux-3.10.4
	< struct file_operations {
	< 	...	
	< 	
	< 	ssize_t (*aio_write) (struct kiocb *, const struct iovec *, unsigned long, loff_t);
	< 	int (*readdir) (struct file *, void *, filldir_t);
	< 	long (*compat_ioctl) (struct file *, unsigned int, unsigned long);

	< 	...
	< }
	3.14.5-1-ARCH
	< struct file_operations {                                                            
	< 	...
	< 
	<   ssize_t (*aio_write) (struct kiocb *, const struct iovec *, unsigned long, loff_t);
	<   int (*iterate) (struct file *, struct dir_context *);
	<   unsigned int (*poll) (struct file *, struct poll_table_struct *);
	< 
	< 	...
	< }

